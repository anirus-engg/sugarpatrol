package com.udaan.sugarpatrol;import com.badlogic.gdx.Gdx;import com.badlogic.gdx.Screen;import com.badlogic.gdx.graphics.OrthographicCamera;import com.badlogic.gdx.math.Vector3;/** * Created on 7/15/14. */public class UpgradesPowerupScreen implements Screen {    private static final int HEARTS_COINS = 2;    private static final int FLASH_COINS = 10;    private static final int FREEZE_COINS = 20;    private static final int ANTOM_COINS = 30;    private SugarPatrolGame game;    private OrthographicCamera camera;    private Vector3 touchPoint;    private Assets assets;    private boolean showConfirm = false;    private boolean showInsufficient = false;    private boolean heartsConfirm = false;    private boolean flashConfirm = false;    private boolean freezeConfirm = false;    private boolean antomConfirm = false;    public UpgradesPowerupScreen(SugarPatrolGame game) {        this.game = game;        camera = new OrthographicCamera(400, 600);        camera.position.set(400 / 2, 600 / 2, 0);        touchPoint = new Vector3();        assets = Assets.getInstance();    }    private void update() {        if(Gdx.input.justTouched()) {            camera.unproject(touchPoint.set(Gdx.input.getX(), Gdx.input.getY(), 0));            if(showInsufficient) {                if(ScreenFunctions.inBounds(touchPoint, 127, 197, 149, 46)) {                    assets.playSound(assets.getClick(), 1);                    showInsufficient = false;                }            }            else if(showConfirm) {                if(ScreenFunctions.inBounds(touchPoint, 31, 216, 150, 47)) {                    assets.playSound(assets.getClick(), 1);                    if(heartsConfirm) {                        heartsConfirm = false;                        showConfirm = false;                        Settings.setGoldCoins(Settings.getGoldCoins() - HEARTS_COINS);                        Settings.setHeartCount(Settings.getHeartCount() + 1);                    }                    else if(flashConfirm) {                        flashConfirm = false;                        showConfirm = false;                        Settings.setGoldCoins(Settings.getGoldCoins() - FLASH_COINS);                        Settings.setFlashCount(Settings.getFlashCount() + 1);                    }                    else if(freezeConfirm) {                        freezeConfirm = false;                        showConfirm = false;                        Settings.setGoldCoins(Settings.getGoldCoins() - FREEZE_COINS);                        Settings.setFreezeCount(Settings.getFreezeCount() + 1);                    }                    else if(antomConfirm) {                        antomConfirm = false;                        showConfirm = false;                        Settings.setGoldCoins(Settings.getGoldCoins() - ANTOM_COINS);                        Settings.setAntomCount(Settings.getAntomCount() + 1);                    }                }                else if(ScreenFunctions.inBounds(touchPoint, 219, 216, 150, 47)) {                    assets.playSound(assets.getClick(), 1);                    showConfirm = false;                    heartsConfirm = flashConfirm = freezeConfirm = antomConfirm = false;                }            }            else {                //touched buyHeart                if(ScreenFunctions.inBounds(touchPoint, 206, 347, 174, 49)) {                    assets.playSound(assets.getClick(), 1);                    if(Settings.checkGoldCoins(HEARTS_COINS)) {                        heartsConfirm = true;                        showConfirm = true;                    }                    else                        showInsufficient = true;                }                //touched buyFlash                if(ScreenFunctions.inBounds(touchPoint, 206, 272, 174, 49)) {                    assets.playSound(assets.getClick(), 1);                    if(Settings.checkGoldCoins(FLASH_COINS)) {                        flashConfirm = true;                        showConfirm = true;                    }                    else                        showInsufficient = true;                }                //touched buyFreeze                if(ScreenFunctions.inBounds(touchPoint, 206, 197, 174, 49)) {                    assets.playSound(assets.getClick(), 1);                    if(Settings.checkGoldCoins(FREEZE_COINS)) {                        freezeConfirm = true;                        showConfirm = true;                    }                    else                        showInsufficient = true;                }                //touched buyAntom                if(ScreenFunctions.inBounds(touchPoint, 206, 118, 174, 49)) {                    assets.playSound(assets.getClick(), 1);                    if(Settings.checkGoldCoins(ANTOM_COINS)) {                        antomConfirm = true;                        showConfirm = true;                    }                    else                        showInsufficient = true;                }                //touched playButton                if (ScreenFunctions.inBounds(touchPoint, 148, 600 - assets.getPlayButton().getRegionHeight(), assets.getPlayButton().getRegionWidth(), assets.getPlayButton().getRegionHeight())) {                    assets.playSound(assets.getClick(), 1);                    game.setScreen(new GameScreen(game));                }                //touched backButton                else if (ScreenFunctions.inBounds(touchPoint, 22, 600 - assets.getBackButton().getRegionHeight(), assets.getBackButton().getRegionWidth(), assets.getBackButton().getRegionHeight())) {                    assets.playSound(assets.getClick(), 1);                    game.setScreen(new MenuScreen(game));                }                //touch next                else if (ScreenFunctions.inBounds(touchPoint, 333, 455, 51, 51)) {                    assets.playSound(assets.getClick(), 1);                    game.setScreen(new UpgradesBackgroundScreen(game));                }            }        }    }    private void draw() {        camera.update();        game.batch.setProjectionMatrix(camera.combined);        game.batch.begin();        game.batch.draw(assets.getBackground(), 0, 0);        game.batch.draw(assets.getMenuUpgradesPowerup(), 0, 0);        game.batch.draw(assets.getArsenal(), 0, 600 - assets.getArsenal().getHeight());        game.batch.draw(assets.getPlayButton(), 148, 600 - assets.getPlayButton().getRegionHeight());        game.batch.draw(assets.getBackButton(), 22, 600 - assets.getBackButton().getRegionHeight());        game.batch.draw(assets.getGoldCoin(), 348, 555);        ScreenFunctions.drawNumbers(game, "" + Settings.getGoldCoins(),                348 - (("" + Settings.getGoldCoins()).length() * World.NUMBERS_WIDTH), 555, assets.getNumbers());        ScreenFunctions.drawNumbers(game, "" + Settings.getHeartCount(),                165 - (("" + Settings.getHeartCount()).length() * World.NUMBERS_WIDTH), 356, assets.getNumbersMedium());        ScreenFunctions.drawNumbers(game, "" + Settings.getFlashCount(),                165 - (("" + Settings.getFlashCount()).length() * World.NUMBERS_WIDTH), 280, assets.getNumbersMedium());        ScreenFunctions.drawNumbers(game, "" + Settings.getFreezeCount(),                165 - (("" + Settings.getFreezeCount()).length() * World.NUMBERS_WIDTH), 202, assets.getNumbersMedium());        ScreenFunctions.drawNumbers(game, "" + Settings.getAntomCount(),                165 - (("" + Settings.getAntomCount()).length() * World.NUMBERS_WIDTH), 127, assets.getNumbersMedium());        if(showConfirm)            game.batch.draw(assets.getConfirm(), 0, 200);        if(showInsufficient)            game.batch.draw(assets.getInsufficient(), 25, 178);        game.batch.end();    }    @Override    public void render(float delta) {        update();        draw();    }    @Override    public void resize(int width, int height) {    }    @Override    public void show() {        game.myRequestHandler.showAds(false);    }    @Override    public void hide() {    }    @Override    public void pause() {    }    @Override    public void resume() {    }    @Override    public void dispose() {    }}